# ---
# # 0) Only run on control‑plane
# - name: Assert we're on a k8s_control_plane host
#   assert:
#     that: "'k8s_control_plane' in group_names"

# # 1) Create the argo namespace
# - name: Ensure the Argo namespace exists
#   kubernetes.core.k8s:
#     api_version: v1
#     kind: Namespace
#     name: argo
#     state: present
#   environment:
#     KUBECONFIG: "{{ ansible_env.HOME }}/.kube/config"

# # 2) Install Argo Workflows (CRDs + controller + server) from install.yaml
# - name: Install Argo Workflows CRDs & controller
#   kubernetes.core.k8s:
#     state: present
#     definition: "{{ lookup('url', 'https://github.com/argoproj/argo-workflows/releases/download/v3.6.3/install.yaml') }}"
#   environment:
#     KUBECONFIG: "{{ ansible_env.HOME }}/.kube/config"

# - name: Show what's in the argo namespace
#   ansible.builtin.shell: |
#     kubectl get all -n argo
#   register: argo_resources
#   environment:
#     KUBECONFIG: "{{ ansible_env.HOME }}/.kube/config"

# - name: Debug Argo namespace contents
#   ansible.builtin.debug:
#     var: argo_resources.stdout_lines

# # 3) Wait for workflow‑controller to come up
# - name: Wait for the Argo Workflow Controller to be ready
#   kubernetes.core.k8s_info:
#     api_version: apps/v1
#     kind: Deployment
#     namespace: argo
#     name: argo-workflows-workflow-controller
#   register: wf_ctrl
#   until:
#     - wf_ctrl.resources | length > 0
#     - (wf_ctrl.resources[0].status.readyReplicas | default(0))
#       == (wf_ctrl.resources[0].status.replicas | default(1))
#   retries: 20
#   delay: 6
#   environment:
#     KUBECONFIG: "{{ ansible_env.HOME }}/.kube/config"

# # 4) Now apply your CronWorkflow & retraining Workflow
# - name: Apply drift ConfigMap
#   kubernetes.core.k8s:
#     definition: "{{ lookup('file', playbook_dir + '/../k8s/workflows/drift-configmap.yml') }}"
#   environment:
#     KUBECONFIG: "{{ ansible_env.HOME }}/.kube/config"

# - name: Deploy drift‑detection CronWorkflow
#   kubernetes.core.k8s:
#     definition: "{{ lookup('file', playbook_dir + '/../k8s/workflows/drift-detection-cronworkflow.yml') }}"
#   environment:
#     KUBECONFIG: "{{ ansible_env.HOME }}/.kube/config"

# - name: Deploy retraining Workflow
#   kubernetes.core.k8s:
#     definition: "{{ lookup('file', playbook_dir + '/../k8s/workflows/retraining-workflow.yml') }}"
#   environment:
#     KUBECONFIG: "{{ ansible_env.HOME }}/.kube/config"

# - name: Register MLops workflows in ArgoCD
#   kubernetes.core.k8s:
#     definition: "{{ lookup('template','argocd-app-mlops.yaml.j2') }}"
#   environment:
#     KUBECONFIG: "{{ ansible_env.HOME }}/.kube/config"

########################################################################

# ---
# # 1) Ensure the “argo” namespace for Workflows exists
# - name: Ensure the argo namespace exists
#   kubernetes.core.k8s:
#     api_version: v1
#     kind: Namespace
#     name: argo
#     state: present

# # 2) Install all Argo Workflows CRDs + controller + UI
# - name: Install Argo Workflows (CRDs & Controller)
#   kubernetes.core.k8s:
#     state: present
#     definition: >
#       {{ lookup('url','https://github.com/argoproj/argo-workflows/releases/download/v3.6.3/install.yaml') }}

# # 3) Wait for Workflow Controller rollout
# # - name: Wait for the Workflow Controller to be ready
# #   shell: >
# #     kubectl rollout status deployment/argo-workflows-workflow-controller
# #       -n argo
# #       --kubeconfig={{ lookup('env','KUBECONFIG') }}
# #   retries: 20
# #   delay: 6
# #   register: rollout_wf
# #   until: rollout_wf.rc == 0

# - name: Wait for the Workflow Controller to be ready
#   shell: kubectl rollout status deployment/workflow-controller -n argo
#   register: rollout_wf
#   retries: 20
#   delay: 6
#   until: rollout_wf.rc == 0

# # 4) Apply your MLops workflows & ApplicationSets
# - name: Deploy drift ConfigMap
#   kubernetes.core.k8s:
#     definition: "{{ lookup('file','{{ playbook_dir }}/../k8s/workflows/drift-configmap.yml') }}"

# - name: Deploy drift-detection CronWorkflow
#   kubernetes.core.k8s:
#     definition: "{{ lookup('file','{{ playbook_dir }}/../k8s/workflows/drift-detection-cronworkflow.yml') }}"

# - name: Deploy retraining Workflow
#   kubernetes.core.k8s:
#     definition: "{{ lookup('file','{{ playbook_dir }}/../k8s/workflows/retraining-workflow.yml') }}"

# - name: Register MLops workflows in ArgoCD
#   kubernetes.core.k8s:
#     definition: "{{ lookup('template','argocd-app-mlops.yaml.j2') }}"


---
# 0) Create the namespace your workflows live in
- name: Ensure mlops namespace exists
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: mlops
    state: present

# 1) Ensure the “argo” namespace for Workflows exists
- name: Ensure the argo namespace exists
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: argo
    state: present

# 2) Download the upstream install.yaml
# - name: Download Argo Workflows install manifest
#   get_url:
#     url: https://github.com/argoproj/argo-workflows/releases/download/v3.6.7/install.yaml
#     dest: /tmp/install_argo_workflows.yaml
#     mode: '0644'

# 3) Apply CRDs, controller, UI, etc.
# - name: Install Argo Workflows (CRDs & Controller)
#   kubernetes.core.k8s:
#     state: present
#     src: /tmp/install_argo_workflows.yaml

- name: Install Argo Workflows (CRDs & Controller)
  shell: kubectl apply -n argo -f https://github.com/argoproj/argo-workflows/releases/download/v3.6.7/install.yaml
  register: argo_install
  until: argo_install.rc == 0
  retries: 5
  delay: 5

# 4) Wait for the correct Deployment name
- name: Wait for the Workflow Controller to be ready
  shell: kubectl rollout status deployment/workflow-controller -n argo
  register: rollout_wf
  until: rollout_wf.rc == 0
  retries: 20
  delay: 6

# 5) Apply your MLops manifests into the mlops namespace
- name: Deploy drift ConfigMap
  kubernetes.core.k8s:
    definition: "{{ lookup('file', playbook_dir + '/../k8s/workflows/drift-configmap.yml') }}"

- name: Deploy drift‑detection CronWorkflow
  kubernetes.core.k8s:
    definition: "{{ lookup('file', playbook_dir + '/../k8s/workflows/drift-detection-cronworkflow.yml') }}"

- name: Deploy retraining Workflow
  kubernetes.core.k8s:
    definition: "{{ lookup('file', playbook_dir + '/../k8s/workflows/retraining-workflow.yml') }}"

- name: Register MLops workflows in ArgoCD
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'argocd-app-mlops.yaml.j2') }}"
