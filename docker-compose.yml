# docker-compose.yaml
version: '3.8'

services:
  model-serving:
    build:
      context: ./model_serving
      dockerfile: Dockerfile
    container_name: model-serving
    ports:
      - "8000:8000" # Expose app port to host
    environment:
      # Add any necessary environment variables for your app
      # Example: Assuming MLflow runs elsewhere or is mocked for local testing
      - MLFLOW_TRACKING_URI=http://host.docker.internal:5000 # Or appropriate value
      - FEATURE_SERVICE_URL=http://host.docker.internal:5001 # Or appropriate value
      # Add other env vars like feature service URL if needed
    # volumes: # Optional: Mount code for live reload during development
    #   - ./model_serving:/app
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090" # Expose Prometheus UI port
    volumes:
      - ./devops/docker-compose/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus # Optional: Named volume for persistence
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus' # Store data in the volume
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    depends_on:
      - model-serving # Wait for model-serving DNS entry, not necessarily readiness

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000" # Expose Grafana UI port
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    volumes:
      - ./devops/docker-compose/grafana/provisioning:/etc/grafana/provisioning
      # Mount dashboard JSON files into the path defined in dashboards.yml provider
      - ./devops/docker-compose/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - grafana_data:/var/lib/grafana # Optional: Named volume for persistence
    restart: unless-stopped
    depends_on:
      - prometheus # Ensure Prometheus is available for data source connection

# Optional: Define named volumes for data persistence
volumes:
  prometheus_data:
  grafana_data:
