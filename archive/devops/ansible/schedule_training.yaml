# devops/ansible/schedule_training.yaml
# Playbook to schedule the recurring training job on the GPU VM using cron.

- name: Schedule Recurring Training Job
  hosts: gpu_vms # Target only the GPU VMs group
  tasks:
    - name: Define the cron job command
      # Construct the full command to run via cron
      # Ensure all needed environment variables are explicitly passed to docker compose run
      # These are read from the environment where Ansible is run (locally)
      # and passed into the cron command string.
      ansible.builtin.set_fact:
        training_cron_command: |
          cd "{{ project_remote_path }}" && \
          docker compose run --rm \
            -e MLFLOW_TRACKING_URI=http://{{ hostvars[groups['cpu_vms'][0]]['ansible_host'] }}:5000 \
            -e MLFLOW_MODEL_NAME={{ lookup('env', 'MLFLOW_MODEL_NAME') }} \
            -e MLFLOW_MODEL_STAGE=Staging \
            -e OS_AUTH_URL={{ lookup('env', 'OS_AUTH_URL') }} \
            -e OS_PROJECT_NAME={{ lookup('env', 'OS_PROJECT_NAME') }} \
            -e OS_PROJECT_DOMAIN_NAME={{ lookup('env', 'OS_PROJECT_DOMAIN_NAME') }} \
            -e OS_USERNAME={{ lookup('env', 'OS_USERNAME') }} \
            -e OS_USER_DOMAIN_NAME={{ lookup('env', 'OS_USER_DOMAIN_NAME') }} \
            -e OS_PASSWORD={{ lookup('env', 'OS_PASSWORD') }} \
            -e OS_REGION_NAME={{ lookup('env', 'OS_REGION_NAME') | default('') }} \
            -e FS_OPENSTACK_SWIFT_CONTAINER_NAME={{ lookup('env', 'FS_OPENSTACK_SWIFT_CONTAINER_NAME') }} \
            -e TRAIN_EPOCHS={{ lookup('env', 'TRAIN_EPOCHS', default='50') }} \
            -e TRAIN_LR={{ lookup('env', 'TRAIN_LR', default='1e-3') }} \
            -e TRAIN_BATCH_SIZE={{ lookup('env', 'TRAIN_BATCH_SIZE', default='32') }} \
            -e TRAIN_FIPS_EMBEDDING_DIM={{ lookup('env', 'TRAIN_FIPS_EMBEDDING_DIM', default='16') }} \
            -e TRAIN_HIDDEN_DIM={{ lookup('env', 'TRAIN_HIDDEN_DIM', default='64') }} \
            -e TRAIN_LSTM_LAYERS={{ lookup('env', 'TRAIN_LSTM_LAYERS', default='1') }} \
            -e TRAIN_TCN_CHANNELS="{{ lookup('env', 'TRAIN_TCN_CHANNELS', default='64,32') }}" \
            -e TRAIN_DROPOUT_RATE={{ lookup('env', 'TRAIN_DROPOUT_RATE', default='0.1') }} \
            -e TRAIN_HOLDOUT_YEAR={{ lookup('env', 'TRAIN_HOLDOUT_YEAR', default='') }} \
            -e TRAIN_VAL_YEAR_RATIO={{ lookup('env', 'TRAIN_VAL_YEAR_RATIO', default='0.2') }} \
            -e TRAIN_CROP_NAME={{ lookup('env', 'TRAIN_CROP_NAME', default='corn') }} \
            model-training python model_training/train_job.py \
          >> {{ project_remote_path }}/training_cron.log 2>&1

    - name: Debug cron command (optional)
      ansible.builtin.debug:
        var: training_cron_command

    - name: Add training job to cron
      ansible.builtin.cron:
        name: "Agri Yield Model Training" # Unique name for the cron job
        user: "{{ ansible_user }}" # The user whose crontab will be modified
        # Schedule: e.g., Run every Sunday at 3 AM
        minute: "0"
        hour: "3"
        day_of_week: "0" # 0 is Sunday, 1 is Monday, ..., 6 is Saturday
        # The full command to be executed by cron
        job: "{{ training_cron_command }}"
        state: present # Ensure the cron job exists

    - name: Ensure training log file exists
      ansible.builtin.file:
        path: "{{ project_remote_path }}/training_cron.log"
        state: touch
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644' # Owner read/write, group/others read

    # Optional: Task to remove the cron job later if needed
    # - name: Remove training cron job
    #   ansible.builtin.cron:
    #     name: "Agri Yield Model Training"
    #     state: absent
    #     user: "{{ ansible_user }}"