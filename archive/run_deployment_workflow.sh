#!/bin/bash

# run_deployment_workflow.sh
# Orchestrates the deployment of services, initial job runs, and scheduling
# using Ansible playbooks.

# Exit immediately if a command exits with a non-zero status.
set -e
# Print commands and their arguments as they are executed.
set -x

# --- Configuration ---
PROJECT_ROOT="$(cd "$(dirname "$0")/." && pwd)" # Get absolute path of project root
ANSIBLE_DIR="$PROJECT_ROOT/devops/ansible"
ANSIBLE_INVENTORY="${ANSIBLE_DIR}/inventory.ini"

# List the playbooks to run in order
DEPLOYMENT_PLAYBOOKS=(
    "deploy_services.yaml"       # Deploy MLflow, Feature Service, Model Serving, Monitoring
    "run_initial_etl.yaml"       # Run ETL job once
    "run_initial_training.yaml"  # Run initial training job once
    "schedule_training.yaml"     # Schedule recurring training job
)

# --- Functions ---
check_ansible_prerequisites() {
    echo "Checking Ansible directory and inventory..."
     # Navigate to the Ansible directory
    if [ ! -d "$ANSIBLE_DIR" ]; then
        echo "Error: Ansible directory not found at $ANSIBLE_DIR"
        exit 1
    fi
    cd "$ANSIBLE_DIR"

    # Check if the inventory file exists (should have been generated by Terraform)
    echo "Checking for Ansible inventory: $ANSIBLE_INVENTORY"
    if [ ! -f "$ANSIBLE_INVENTORY" ]; then
        echo "Error: Ansible inventory file not found at $ANSIBLE_INVENTORY."
        echo "Please ensure Terraform provisioning completed successfully and generated the inventory."
        exit 1
    fi
    echo "Ansible inventory found."

    # Check if all required playbooks exist
    echo "Checking for deployment playbooks..."
    for playbook in "${DEPLOYMENT_PLAYBOOKS[@]}"; do
        if [ ! -f "$playbook" ]; then
            echo "Error: Required playbook '$playbook' not found in $ANSIBLE_DIR."
            exit 1
        fi
        echo "Found playbook: $playbook"
    done
    echo "All required playbooks found."
}

# --- Main Execution ---
echo "--- Starting MLops Pipeline Deployment Workflow ---"

# Source the .env file explicitly in this script's environment
# This makes variables available for `lookup('env', ...)` in Ansible playbooks
echo "Sourcing .env file..."
if [ -f "$PROJECT_ROOT/.env" ]; then
    source "$PROJECT_ROOT/.env"
    # Export PROJECT_ROOT environment variable for Ansible lookup
    export PROJECT_ROOT="$PROJECT_ROOT"
    echo "Exported PROJECT_ROOT=${PROJECT_ROOT} for Ansible lookup."
else
    echo "Warning: .env file not found at $PROJECT_ROOT/.env. Proceeding, but playbooks may fail if they rely on .env variables."
    # Still export PROJECT_ROOT even if .env is missing
    export PROJECT_ROOT="$PROJECT_ROOT"
    echo "Exported PROJECT_ROOT=${PROJECT_ROOT} (without sourcing .env)."
fi

# Check Ansible prerequisites (navigate to Ansible dir)
check_ansible_prerequisites

# Execute each playbook in sequence
for playbook in "${DEPLOYMENT_PLAYBOOKS[@]}"; do
    echo "--- Running Ansible Playbook: $playbook ---"

    # Check for specific variables needed by playbooks before running them
    case "$playbook" in
        "run_initial_etl.yaml")
            if [ -z "$GOOGLE_DRIVE_FOLDER_ID" ]; then
                echo "Error: GOOGLE_DRIVE_FOLDER_ID environment variable is required for $playbook but is not set."
                exit 1
            fi
            ;;
        # Add checks for TRAIN_* vars if they are critical overrides before running training playbooks
        # "run_initial_training.yaml" | "schedule_training.yaml")
        #     if [ -z "$TRAIN_EPOCHS" ]; then
        #          echo "Warning: TRAIN_EPOCHS environment variable not set. Using default in train_job.py."
        #     fi
        #     # ... check other TRAIN_* variables ...
        #     ;;
    esac


    # Run the current playbook
    # Use -i to specify the inventory file
    # Using --ssh-common-args='-o StrictHostKeyChecking=no' here as well,
    # although initial connection might have added host keys already.
    # In production, manage host keys properly (e.g., via Ansible's host key checking).
    ansible-playbook "$playbook" -i "$ANSIBLE_INVENTORY" --ssh-common-args='-o StrictHostKeyChecking=no'

    # Check the exit status of the playbook run
    if [ $? -ne 0 ]; then
        echo "--- Ansible Playbook Failed: $playbook ---"
        echo "Deployment workflow stopped."
        exit 1
    fi

    echo "--- Ansible Playbook Complete: $playbook ---"
done

echo "--- MLops Pipeline Deployment Workflow Finished Successfully ---"
echo "All deployment playbooks executed."
echo "Check your VMs and service UIs (MLflow on CPU VM: http://<cpu_vm_floating_ip>:5000, etc.)."

exit 0