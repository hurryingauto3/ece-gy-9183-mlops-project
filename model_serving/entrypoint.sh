#!/bin/sh

# Exit immediately if a command exits with a non-zero status.
set -e

# Define the directory where dummy assets will be generated by the script.
# This is the OUTPUT directory for the script, not where the script itself resides.
ASSETS_DIR="/app/dummy_assets"

# The asset generation script and its model.py dependency are now in /app/asset_generator_tools/
GENERATOR_SCRIPT_PATH="/app/asset_generator_tools/generate_assets.py"

# Create the output assets directory if it doesn't exist (also done in Dockerfile, but good to be sure)
if [ ! -d "$ASSETS_DIR" ]; then
  echo "Creating assets output directory: $ASSETS_DIR"
  mkdir -p "$ASSETS_DIR"
fi

# Run the script to generate dummy assets.
# Python will add the script's directory (/app/asset_generator_tools/) to sys.path,
# so "from model import ..." in generate_assets.py should find model.py in the same directory.
echo "Attempting to generate dummy model assets using script: $GENERATOR_SCRIPT_PATH"
python "$GENERATOR_SCRIPT_PATH"
GENERATION_STATUS=$?

if [ $GENERATION_STATUS -eq 0 ]; then
  echo "Dummy model assets generated successfully into $ASSETS_DIR."
else
  echo "[ERROR] Dummy model asset generation failed with status $GENERATION_STATUS. Check logs."
  # Optionally, exit here if asset generation is critical for startup
  # exit $GENERATION_STATUS 
fi

# Now, execute the main command provided to the docker container (e.g., uvicorn ...)
# "$@" passes all arguments from CMD to exec
echo "Executing main command: $@"
exec "$@" 